{"version":3,"sources":["redux/actions.js","components/TopSpace/Options/OnOff/index.js","components/TopSpace/Options/PlusMinus/index.js","components/TopSpace/Options/index.js","components/TopSpace/index.js","components/Captions/index.js","App.js","serviceWorker.js","redux/reducers.js","index.js"],"names":["increment_textSize","type","decrement_textSize","increment_lineWidth","decrement_lineWidth","increment_numLines","decrement_numLines","flip_lockScreen","flip_invertColors","OnOff","props","setting","useSelector","dispatch","useDispatch","console","log","className","item","onClick","action","PlusMinus","decrement","style","textAlign","increment","Options","id","state","textSize","lineWidth","numLines","lockScreen","invertColors","TopSpace","display","hide","bind","show","this","setState","document","getElementById","addEventListener","removeEventListener","React","Component","recognition","window","SpeechRecognition","webkitSpeechRecognition","lang","continuous","interimResults","Captions","line","appendLine","start","stop","e","onResult","line_","Array","from","results","map","result","transcript","join","charAt","toUpperCase","slice","isFinal","updateCurrentLine","str","out","isScrolledToBottom","scrollHeight","clientHeight","scrollTop","outtwo","div","createElement","textContent","appendChild","App","Boolean","location","hostname","match","allReducers","combineReducers","Math","max","store","createStore","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c3b7bb5f.chunk.js","sourcesContent":["export const set_screenWidth = (width) => {\r\n     return {\r\n          type: 'SET_SCREENWIDTH',\r\n          value: width\r\n     };\r\n}\r\n\r\nexport const set_screenHeight = (height) => {\r\n     return {\r\n          type: 'SET_SCREENHEIGHT',\r\n          value: height\r\n     };\r\n}\r\n\r\nexport const increment_textSize = () => {\r\n     return { type: 'INCREMENT_TEXTSIZE' };\r\n}\r\n\r\nexport const decrement_textSize = () => {\r\n     return { type: 'DECREMENT_TEXTSIZE' };\r\n}\r\n\r\nexport const increment_lineWidth = () => {\r\n     return { type: 'INCREMENT_LINEWIDTH' };\r\n}\r\n\r\nexport const decrement_lineWidth = () => {\r\n     return { type: 'DECREMENT_LINEWIDTH' };\r\n}\r\n\r\nexport const increment_numLines = () => {\r\n     return { type: 'INCREMENT_NUMLINES' };\r\n}\r\n\r\nexport const decrement_numLines = () => {\r\n     return { type: 'DECREMENT_NUMLINES' };\r\n}\r\n\r\nexport const flip_lockScreen = () => {\r\n     return { type: 'FLIP_LOCKSCREEN' };\r\n}\r\n\r\nexport const flip_invertColors = () => {\r\n     return { type: 'FLIP_INVERTCOLORS' };\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nexport default function OnOff(props) {\r\n     const setting = useSelector(props.setting);\r\n     const dispatch = useDispatch();\r\n     console.log(setting);\r\n     return (\r\n          <div className=\"row\">\r\n               <div className=\"col-8\">\r\n                    <p>{props.item}</p>\r\n               </div>\r\n               <div className=\"col-2 align-items-center\">\r\n                    <button\r\n                      className={setting ? \"btn btn-danger\" : \"btn btn-success\"}\r\n                      onClick={() => dispatch(props.action())}>\r\n                         {setting ? 'OFF' : 'ON'}\r\n                    </button>\r\n               </div>\r\n          </div>\r\n     );\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nexport default function PlusMinus(props) {\r\n     const setting = useSelector(props.setting);\r\n     const dispatch = useDispatch();\r\n     console.log(setting);\r\n     return (\r\n          <div className=\"row\">\r\n               <div className=\"col-2 align-items-center\">\r\n                    <button\r\n                      className=\"btn btn-default\"\r\n                      onClick={() => dispatch(props.decrement())}>-</button>\r\n               </div>\r\n               <div className=\"col-5\">\r\n                    <p>{props.item}</p>\r\n               </div>\r\n               <div className=\"col-1\">\r\n                    <p style={{textAlign:\"right\"}}>{setting}</p>\r\n               </div>\r\n               <div className=\"col-2 align-items-center\">\r\n                    <button\r\n                      className=\"btn btn-default\"\r\n                      onClick={() => dispatch(props.increment())}>+</button>\r\n               </div>\r\n          </div>\r\n     );\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport OnOff from './OnOff';\r\nimport PlusMinus from './PlusMinus';\r\nimport './index.css';\r\nimport {\r\n     flip_lockScreen,\r\n     flip_invertColors,\r\n     increment_textSize,\r\n     decrement_textSize,\r\n     increment_lineWidth,\r\n     decrement_lineWidth,\r\n     increment_numLines,\r\n     decrement_numLines,\r\n} from '../../../redux/actions'\r\n\r\nexport default function Options() {\r\n     const textSize = (state) => state.textSize;\r\n     const lineWidth = (state) => state.lineWidth;\r\n     const numLines = (state) => state.numLines;\r\n     const invertColors = (state) => state.invertColors;\r\n     const lockScreen = (state) => state.lockScreen;\r\n\r\n     return (\r\n          <div className=\"Options\" id=\"options-space\">\r\n               <h1>Options</h1>\r\n               <div className=\"item-wrapper\">\r\n                    <PlusMinus item=\"Text size\" setting={textSize}\r\n                         increment={increment_textSize}\r\n                         decrement={decrement_textSize} />\r\n               </div>\r\n               <div className=\"item-wrapper\">\r\n                    <PlusMinus item=\"Line width\" setting={lineWidth}\r\n                         increment={increment_lineWidth}\r\n                         decrement={decrement_lineWidth} />\r\n               </div>\r\n               <div className=\"item-wrapper\">\r\n                    <PlusMinus item=\"Number of lines\" setting={numLines}\r\n                         increment={increment_numLines}\r\n                         decrement={decrement_numLines} />\r\n               </div>\r\n               <div className=\"item-wrapper\">\r\n                    <OnOff item=\"Lock screen\" setting={lockScreen}\r\n                         action={flip_lockScreen} />\r\n               </div>\r\n               <div className=\"item-wrapper\">\r\n                    <OnOff item=\"Invert colors\" setting={invertColors}\r\n                         action={flip_invertColors} />\r\n               </div>\r\n          </div>\r\n     );\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './index.css';\r\nimport Options from './Options';\r\n\r\nclass TopSpace extends React.Component {\r\n     constructor(props) {\r\n          super(props);\r\n          this.state = {\r\n               display: null\r\n          }\r\n          this.hide = this.hide.bind(this)\r\n          this.show = this.show.bind(this)\r\n     }\r\n     hide() {\r\n          this.setState({ display: 'none' });\r\n          document.getElementById('outer').addEventListener('click', this.show)\r\n     }\r\n     show() {\r\n          this.setState({ display: null })\r\n          document.getElementById('outer').removeEventListener('click', this.show)\r\n     }\r\n\r\n     render() {\r\n          return (\r\n               <div className=\"TopSpace\" id=\"outer\">\r\n                    <div className=\"Container\" id=\"inner\" style={this.state}>\r\n                         <div className=\"TheBox1\">\r\n                              <Options />\r\n                         </div>\r\n                         <div className=\"TheBox2\" onClick={this.hide}>\r\n                              <div className=\"GavinBelsonSignatureBox\">Hide</div>\r\n                         </div>\r\n                    </div>\r\n               </div>\r\n          )\r\n     }\r\n}\r\n\r\nexport default TopSpace;\r\n","import React from 'react'\r\nimport './index.css'\r\n\r\nconst SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition\r\nconst recognition = new SpeechRecognition()\r\nrecognition.lang = 'en-US'\r\nrecognition.continuous = false\r\nrecognition.interimResults = true\r\n\r\nclass Captions extends React.Component {\r\n     constructor() {\r\n          super()\r\n          this.state = {\r\n               line: ''\r\n          }\r\n          this.appendLine = this.appendLine.bind(this)\r\n     }\r\n\r\n     start() {\r\n          recognition.addEventListener('end', recognition.start)\r\n          recognition.start()\r\n     }\r\n\r\n     stop() {\r\n          recognition.removeEventListener('end', recognition.start)\r\n          recognition.stop()\r\n     }\r\n\r\n     componentDidMount() {\r\n          recognition.addEventListener('result', e => { this.onResult(e) })\r\n          this.start()\r\n     }\r\n\r\n     onResult(e) {\r\n          let line_ = Array.from(e.results)\r\n            .map(result => result[0])\r\n            .map(result => result.transcript)\r\n            .join('');\r\n          line_ = line_.charAt(0).toUpperCase() + line_.slice(1)\r\n          if (e.results[0].isFinal)\r\n               this.appendLine(line_ + '.')\r\n          else this.updateCurrentLine(line_)\r\n     }\r\n\r\n     updateCurrentLine(str) {\r\n          const out = document.getElementById('out')\r\n          var isScrolledToBottom = out.scrollHeight - out.clientHeight <= out.scrollTop + 1\r\n          this.setState({ line: str })\r\n          if (isScrolledToBottom)\r\n               out.scrollTop = out.scrollHeight - out.clientHeight\r\n     }\r\n\r\n     appendLine(str) {\r\n          const out = document.getElementById('out')\r\n          const outtwo = document.getElementById('outtwo')\r\n          var isScrolledToBottom = out.scrollHeight - out.clientHeight <= out.scrollTop + 1\r\n          var div = document.createElement('div')\r\n          div.textContent = str\r\n          outtwo.appendChild(div)\r\n          this.setState({ line: '' })\r\n          if (isScrolledToBottom)\r\n               out.scrollTop = out.scrollHeight - out.clientHeight\r\n     }\r\n\r\n     render() {\r\n          return (\r\n               <div className='Captions' id='out'>\r\n                    <div id='outtwo'></div>\r\n                    <div id='curr'>{this.state.line}</div>\r\n               </div>\r\n          )\r\n     }\r\n}\r\n\r\nexport default Captions\r\n","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux'\nimport { increment } from './redux/actions'\nimport TopSpace from './components/TopSpace'\nimport Captions from './components/Captions'\nimport './App.css';\n\n/* var DEFAULT_TEXT_SIZE = 48;\nvar DEFAULT_LINE_WIDTH = 10;\nvar DEFAULT_NUM_LINES = 4;\n360 x 640 screen */\n\nclass App extends React.Component {\n     render() {\n          return (\n               <div className=\"App\">\n                    <TopSpace />\n                    <Captions />\n               </div>\n          )\n     }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\r\n/*\r\nconst windowWidthReducer = (state, action) => {\r\n     switch (action.type) {\r\n          case 'SET_SCREENWIDTH':\r\n               return action.value;\r\n          default:\r\n               return state;\r\n     }\r\n}\r\n\r\nconst windowHeightReducer = (state, action) => {\r\n     switch (action.type) {\r\n          case 'SET_SCREENHEIGHT':\r\n               return action.value;\r\n          default:\r\n               return state;\r\n     }\r\n}\r\n*/\r\nconst textSizeReducer = (state = 48, action) => {\r\n     switch (action.type) {\r\n          case 'INCREMENT_TEXTSIZE':\r\n               return state + 1;\r\n          case 'DECREMENT_TEXTSIZE':\r\n               return Math.max(1, state - 1);\r\n          default:\r\n               return state;\r\n     }\r\n}\r\n\r\nconst lineWidthReducer = (state = 10, action) => {\r\n     switch (action.type) {\r\n          case 'INCREMENT_LINEWIDTH':\r\n               return state + 1;\r\n          case 'DECREMENT_LINEWIDTH':\r\n               return Math.max(1, state - 1);\r\n          default:\r\n               return state;\r\n     }\r\n}\r\n\r\nconst numLinesReducer = (state = 4, action) => {\r\n     switch (action.type) {\r\n          case 'INCREMENT_NUMLINES':\r\n               return state + 1;\r\n          case 'DECREMENT_NUMLINES':\r\n               return Math.max(1, state - 1);\r\n          default:\r\n               return state;\r\n     }\r\n}\r\n\r\nconst lockScreenReducer = (state = true, action) => {\r\n     if (action.type == 'FLIP_LOCKSCREEN')\r\n          return !state;\r\n     else return state;\r\n}\r\n\r\nconst invertColorsReducer = (state = false, action) => {\r\n     if (action.type == 'FLIP_INVERTCOLORS')\r\n          return !state;\r\n     else return state;\r\n}\r\n\r\nconst allReducers = combineReducers({\r\n//     windowWidth: windowWidthReducer,\r\n//     windowHeight: windowHeightReducer,\r\n     textSize: textSizeReducer,\r\n     lineWidth: lineWidthReducer,\r\n     numLines: numLinesReducer,\r\n     lockScreen: lockScreenReducer,\r\n     invertColors: invertColorsReducer,\r\n});\r\n\r\nexport default allReducers;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport allReducers from './redux/reducers';\nimport { Provider } from 'react-redux';\n\nconst store = createStore(allReducers);\n\nReactDOM.render(\n     <Provider store={store}>\n          <App />\n     </Provider>,\n     document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}