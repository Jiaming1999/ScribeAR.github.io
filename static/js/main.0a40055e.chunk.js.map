{"version":3,"sources":["components/TopSpace/Options/OnOff/index.js","components/TopSpace/Options/PlusMinus/index.js","redux/actions.js","components/TopSpace/Options/Record/index.js","components/TopSpace/Options/index.js","components/TopSpace/index.js","components/Captions/Recognition/index.js","components/Captions/index.js","serviceWorker.js","redux/reducers.js","index.js","App.js"],"names":["OnOff","props","setting","useSelector","dispatch","useDispatch","className","item","onClick","action","PlusMinus","decrement","style","textAlign","increment","increment_textSize","type","decrement_textSize","increment_lineWidth","decrement_lineWidth","increment_numLines","decrement_numLines","flip_invertColors","flip_recording","Record","state","recording","document","body","onkeyup","e","keyCode","id","height","alt","src","Options","textSize","lineWidth","numLines","invertColors","TopSpace","shown","timeoutId","setTimeout","hide","bind","show","resetTimeout","this","setState","getElementById","addEventListener","removeEventListener","clearTimeout","toId","React","Component","recognition","window","SpeechRecognition","webkitSpeechRecognition","lang","continuous","interimResults","Recognition","line","appendLine","start","stop","onResult","prevProps","prevState","isRecording","line_","Array","from","results","map","result","transcript","join","charAt","toUpperCase","slice","isFinal","updateCurrentLine","str","out","isScrolledToBottom","scrollHeight","clientHeight","scrollTop","outtwo","div","createElement","textContent","appendChild","PureComponent","Captions","paddingString","h","sz","fontSize","paddingLeft","paddingRight","Boolean","location","hostname","match","allReducers","combineReducers","Math","max","min","lockScreen","store","createStore","ReactDOM","render","sizeString","botHeight","topHeight","bgColor","color","backgroundColor","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0a40055e.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\nexport default function OnOff(props) {\r\n     const setting = useSelector(props.setting)\r\n     const dispatch = useDispatch()\r\n     return (\r\n          <div className=\"row\">\r\n               <div className=\"col-8\">\r\n                    <p>{props.item}</p>\r\n               </div>\r\n               <div className=\"col-2 align-items-center\">\r\n                    <button\r\n                      className={setting ? \"btn btn-danger\" : \"btn btn-success\"}\r\n                      onClick={() => dispatch(props.action())}>\r\n                         {setting ? 'OFF' : 'ON'}\r\n                    </button>\r\n               </div>\r\n          </div>\r\n     )\r\n}\r\n","import React from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\nexport default function PlusMinus(props) {\r\n     const setting = useSelector(props.setting)\r\n     const dispatch = useDispatch()\r\n     return (\r\n          <div className=\"row\">\r\n               <div className=\"col-2 align-items-center\">\r\n                    <button className=\"btn btn-default\"\r\n                      onClick={() => dispatch(props.decrement())}>-</button>\r\n               </div>\r\n               <div className=\"col-5\">\r\n                    <p>{props.item}</p>\r\n               </div>\r\n               <div className=\"col-1\">\r\n                    <p style={{textAlign:\"right\"}}>{setting}</p>\r\n               </div>\r\n               <div className=\"col-2 align-items-center\">\r\n                    <button className=\"btn btn-default\"\r\n                      onClick={() => dispatch(props.increment())}>+</button>\r\n               </div>\r\n          </div>\r\n     );\r\n}\r\n","export const set_screenWidth = (width) => {\r\n     return {\r\n          type: 'SET_SCREENWIDTH',\r\n          value: width\r\n     };\r\n}\r\n\r\nexport const set_screenHeight = (height) => {\r\n     return {\r\n          type: 'SET_SCREENHEIGHT',\r\n          value: height\r\n     };\r\n}\r\n\r\nexport const increment_textSize = () => {\r\n     return { type: 'INCREMENT_TEXTSIZE' };\r\n}\r\n\r\nexport const decrement_textSize = () => {\r\n     return { type: 'DECREMENT_TEXTSIZE' };\r\n}\r\n\r\nexport const increment_lineWidth = () => {\r\n     return { type: 'INCREMENT_LINEWIDTH' };\r\n}\r\n\r\nexport const decrement_lineWidth = () => {\r\n     return { type: 'DECREMENT_LINEWIDTH' };\r\n}\r\n\r\nexport const increment_numLines = () => {\r\n     return { type: 'INCREMENT_NUMLINES' };\r\n}\r\n\r\nexport const decrement_numLines = () => {\r\n     return { type: 'DECREMENT_NUMLINES' };\r\n}\r\n\r\nexport const flip_lockScreen = () => {\r\n     return { type: 'FLIP_LOCKSCREEN' };\r\n}\r\n\r\nexport const flip_invertColors = () => {\r\n     return { type: 'FLIP_INVERTCOLORS' };\r\n}\r\n\r\nexport const flip_recording = () => {\r\n     return { type: 'FLIP_RECORDING' };\r\n}\r\n","import React from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport './index.css'\r\nimport { flip_recording } from '../../../../redux/actions'\r\n\r\nexport default function Record(props) {\r\n     const recording = (state) => state.recording\r\n     const setting = useSelector(recording)\r\n     const dispatch = useDispatch()\r\n\r\n     document.body.onkeyup = function(e) {\r\n          if (e.keyCode == 32)\r\n               dispatch(flip_recording())\r\n     }\r\n\r\n     return (\r\n          <div className=\"row\">\r\n               <div className=\"col-8\">\r\n                    <p>{setting ? \"Recording\" : \"Record\"}</p>\r\n               </div>\r\n               <div className=\"col-2 align-items-center\" id=\"icon\">\r\n                    <input className={setting ? \"hidden\" : \"shown\"}\r\n                         type=\"image\" id=\"record\" height=\"60vh\"\r\n                         alt=\"Record\"\r\n                         src={\"./record_btn.png\"}\r\n                         onClick={() => dispatch(flip_recording())} />\r\n                    <input className={setting ? \"shown\" : \"hidden\"}\r\n                         type=\"image\" id=\"stop\" height=\"60vh\"\r\n                         alt=\"Stop\"\r\n                         src={\"./stop_btn.png\"}\r\n                         onClick={() => dispatch(flip_recording())} />\r\n               </div>\r\n          </div>\r\n     )\r\n}\r\n","import React from 'react'\r\nimport OnOff from './OnOff'\r\nimport PlusMinus from './PlusMinus'\r\nimport Record from './Record'\r\nimport './index.css'\r\nimport {\r\n     flip_invertColors,\r\n     increment_textSize,\r\n     decrement_textSize,\r\n     increment_lineWidth,\r\n     decrement_lineWidth,\r\n     increment_numLines,\r\n     decrement_numLines\r\n} from '../../../redux/actions'\r\n\r\nexport default function Options() {\r\n     const textSize = (state) => state.textSize\r\n     const lineWidth = (state) => state.lineWidth\r\n     const numLines = (state) => state.numLines\r\n     const invertColors = (state) => state.invertColors\r\n\r\n     return (\r\n          <div className=\"Options\" id=\"options-space\">\r\n               <h1>Options</h1>\r\n               <div className=\"item-wrapper\">\r\n                    <PlusMinus item=\"Text size\" setting={textSize}\r\n                         increment={increment_textSize}\r\n                         decrement={decrement_textSize} />\r\n               </div>\r\n               <div className=\"item-wrapper\">\r\n                    <PlusMinus item=\"Line width\" setting={lineWidth}\r\n                         increment={increment_lineWidth}\r\n                         decrement={decrement_lineWidth} />\r\n               </div>\r\n               <div className=\"item-wrapper\">\r\n                    <PlusMinus item=\"Number of lines\" setting={numLines}\r\n                         increment={increment_numLines}\r\n                         decrement={decrement_numLines} />\r\n               </div>\r\n               <div className=\"item-wrapper\">\r\n                    <OnOff item=\"Invert colors\" setting={invertColors}\r\n                         action={flip_invertColors} />\r\n               </div>\r\n               <div className=\"item-wrapper\">\r\n                    <Record />\r\n               </div>\r\n          </div>\r\n     );\r\n}\r\n","import React from 'react'\r\nimport './index.css'\r\nimport Options from './Options'\r\n\r\nclass TopSpace extends React.Component {\r\n     constructor(props) {\r\n          super(props)\r\n          this.state = {\r\n               shown: true,\r\n               timeoutId: setTimeout(this.hide.bind(this), 15000)\r\n          }\r\n          this.hide = this.hide.bind(this)\r\n          this.show = this.show.bind(this)\r\n          this.resetTimeout = this.resetTimeout.bind(this)\r\n     }\r\n     hide() {\r\n          this.setState({ shown: false })\r\n          document.getElementById('outer').addEventListener('click', this.show)\r\n     }\r\n     show() {\r\n          this.setState({ shown: true })\r\n          document.getElementById('outer').removeEventListener('click', this.show)\r\n          this.resetTimeout()\r\n     }\r\n     resetTimeout() {\r\n          clearTimeout(this.state.timeoutId)\r\n          var toId = setTimeout(this.hide, 15000)\r\n          this.setState({timeoutId: toId})\r\n     }\r\n     componentDidMount() {\r\n          document.getElementById('TheBox1').addEventListener('click', this.show)\r\n     }\r\n\r\n     render() {\r\n          var h = '64vh';\r\n          return (\r\n               <div className=\"TopSpace\" id=\"outer\" style={{ height: h }}>\r\n                    <div className={\"Container \" + (this.state.shown ? \"shown\" : \"hidden\")}>\r\n                         <div id=\"TheBox1\">\r\n                              <Options resetTimeout={this.resetTimeout} />\r\n                         </div>\r\n                         <div className=\"TheBox2\" onClick={this.hide}>\r\n                              <div className=\"TheBox3\">Hide</div>\r\n                         </div>\r\n                    </div>\r\n               </div>\r\n          )\r\n     }\r\n}\r\n\r\nexport default TopSpace;\r\n","import React from 'react'\r\n\r\nconst SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition\r\nconst recognition = new SpeechRecognition()\r\nrecognition.lang = 'en-US'\r\nrecognition.continuous = false\r\nrecognition.interimResults = true\r\n\r\nclass Recognition extends React.PureComponent {\r\n     constructor() {\r\n          super()\r\n          this.state = {\r\n               line: '',\r\n               recording: true\r\n          }\r\n          this.appendLine = this.appendLine.bind(this)\r\n          this.start = this.start.bind(this)\r\n          this.stop = this.stop.bind(this)\r\n          this.onResult = this.onResult.bind(this)\r\n     }\r\n\r\n     componentDidUpdate(prevProps, prevState) {\r\n          if (prevProps.isRecording === this.props.isRecording)\r\n               return\r\n          if (this.props.isRecording)\r\n               this.start()\r\n          else this.stop()\r\n     }\r\n\r\n     start() {\r\n          recognition.addEventListener('end', recognition.start)\r\n          recognition.start()\r\n     }\r\n\r\n     stop() {\r\n          recognition.removeEventListener('end', recognition.start)\r\n          recognition.stop()\r\n     }\r\n\r\n     componentDidMount() {\r\n          recognition.addEventListener('result', e => { this.onResult(e) })\r\n          this.start()\r\n     }\r\n\r\n     onResult(e) {\r\n          let line_ = Array.from(e.results)\r\n            .map(result => result[0])\r\n            .map(result => result.transcript)\r\n            .join('');\r\n          line_ = line_.charAt(0).toUpperCase() + line_.slice(1)\r\n          if (e.results[0].isFinal)\r\n               this.appendLine(line_ + '.')\r\n          else this.updateCurrentLine(line_)\r\n     }\r\n\r\n     updateCurrentLine(str) {\r\n          const out = document.getElementById('out')\r\n          var isScrolledToBottom = out.scrollHeight - out.clientHeight <= out.scrollTop + 1\r\n          this.setState({ line: str })\r\n          if (isScrolledToBottom)\r\n               out.scrollTop = out.scrollHeight - out.clientHeight\r\n     }\r\n\r\n     appendLine(str) {\r\n          const out = document.getElementById('out')\r\n          const outtwo = document.getElementById('outtwo')\r\n          var isScrolledToBottom = out.scrollHeight - out.clientHeight <= out.scrollTop + 1\r\n          var div = document.createElement('div')\r\n          div.textContent = str\r\n          outtwo.appendChild(div)\r\n          this.setState({ line: '' })\r\n          if (isScrolledToBottom)\r\n               out.scrollTop = out.scrollHeight - out.clientHeight\r\n     }\r\n\r\n     render() {\r\n          return (\r\n               <div>\r\n                    <div id='outtwo'></div>\r\n                    <div id='curr'>{this.state.line}</div>\r\n               </div>\r\n          )\r\n     }\r\n}\r\n\r\nexport default Recognition\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport './index.css'\r\nimport Recognition from './Recognition'\r\n\r\nexport default function Captions(props) {\r\n     const lineWidth = useSelector((state) => state.lineWidth)\r\n     const recording = useSelector((state) => state.recording)\r\n     var paddingString = (11 - lineWidth) * 3 + 'vw'\r\n     var h = props.height\r\n     var sz = props.textSize\r\n     return (\r\n          <div className=\"Captions\" id=\"out\" style={{\r\n               fontSize: sz,\r\n               height: h,\r\n               paddingLeft: paddingString,\r\n               paddingRight: paddingString }}>\r\n               <Recognition isRecording={recording} />\r\n          </div>\r\n     )\r\n}\r\n/*\r\n\r\nconst SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition\r\nconst recognition = new SpeechRecognition()\r\nrecognition.lang = 'en-US'\r\nrecognition.continuous = false\r\nrecognition.interimResults = true\r\n\r\nclass Captions extends React.Component {\r\n     constructor() {\r\n          super()\r\n          this.state = {\r\n               line: 'Hello world.'\r\n          }\r\n          this.appendLine = this.appendLine.bind(this)\r\n     }\r\n\r\n     start() {\r\n          recognition.addEventListener('end', recognition.start)\r\n          recognition.start()\r\n     }\r\n\r\n     stop() {\r\n          recognition.removeEventListener('end', recognition.start)\r\n          recognition.stop()\r\n     }\r\n\r\n     componentDidMount() {\r\n          recognition.addEventListener('result', e => { this.onResult(e) })\r\n          //this.start()\r\n     }\r\n\r\n     onResult(e) {\r\n          let line_ = Array.from(e.results)\r\n            .map(result => result[0])\r\n            .map(result => result.transcript)\r\n            .join('');\r\n          line_ = line_.charAt(0).toUpperCase() + line_.slice(1)\r\n          if (e.results[0].isFinal)\r\n               this.appendLine(line_ + '.')\r\n          else this.updateCurrentLine(line_)\r\n     }\r\n\r\n     updateCurrentLine(str) {\r\n          const out = document.getElementById('out')\r\n          var isScrolledToBottom = out.scrollHeight - out.clientHeight <= out.scrollTop + 1\r\n          this.setState({ line: str })\r\n          if (isScrolledToBottom)\r\n               out.scrollTop = out.scrollHeight - out.clientHeight\r\n     }\r\n\r\n     appendLine(str) {\r\n          const out = document.getElementById('out')\r\n          const outtwo = document.getElementById('outtwo')\r\n          var isScrolledToBottom = out.scrollHeight - out.clientHeight <= out.scrollTop + 1\r\n          var div = document.createElement('div')\r\n          div.textContent = str\r\n          outtwo.appendChild(div)\r\n          this.setState({ line: '' })\r\n          if (isScrolledToBottom)\r\n               out.scrollTop = out.scrollHeight - out.clientHeight\r\n     }\r\n\r\n     render() {\r\n\r\n\r\n          return (\r\n               <div className='Captions' id='out'>\r\n                    <div id='outtwo'></div>\r\n                    <div id='curr'>{this.state.line}</div>\r\n               </div>\r\n          )\r\n     }\r\n}\r\n\r\nexport default Captions\r\n*/\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\r\n\r\nconst textSizeReducer = (state = 6, action) => {\r\n     switch (action.type) {\r\n          case 'INCREMENT_TEXTSIZE':\r\n               return state + 1;\r\n          case 'DECREMENT_TEXTSIZE':\r\n               return Math.max(1, state - 1);\r\n          default:\r\n               return state;\r\n     }\r\n}\r\n\r\nconst lineWidthReducer = (state = 10, action) => {\r\n     switch (action.type) {\r\n          case 'INCREMENT_LINEWIDTH':\r\n               return Math.min(10, state + 1)\r\n          case 'DECREMENT_LINEWIDTH':\r\n               return Math.max(1, state - 1);\r\n          default:\r\n               return state;\r\n     }\r\n}\r\n\r\nconst numLinesReducer = (state = 4, action) => {\r\n     switch (action.type) {\r\n          case 'INCREMENT_NUMLINES':\r\n               return state + 1;\r\n          case 'DECREMENT_NUMLINES':\r\n               return Math.max(1, state - 1);\r\n          default:\r\n               return state;\r\n     }\r\n}\r\n\r\nconst lockScreenReducer = (state = false, action) => {\r\n     if (action.type === 'FLIP_LOCKSCREEN')\r\n          return !state;\r\n     else return state;\r\n}\r\n\r\nconst invertColorsReducer = (state = false, action) => {\r\n     if (action.type === 'FLIP_INVERTCOLORS')\r\n          return !state;\r\n     else return state;\r\n}\r\n\r\nconst recordingReducer = (state = true, action) => {\r\n     if (action.type === 'FLIP_RECORDING')\r\n          return !state\r\n     else return state\r\n}\r\n\r\nconst allReducers = combineReducers({\r\n     textSize: textSizeReducer,\r\n     lineWidth: lineWidthReducer,\r\n     numLines: numLinesReducer,\r\n     lockScreen: lockScreenReducer,\r\n     invertColors: invertColorsReducer,\r\n     recording: recordingReducer\r\n});\r\n\r\nexport default allReducers;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport allReducers from './redux/reducers';\nimport { Provider } from 'react-redux';\n\nconst store = createStore(allReducers);\n\nReactDOM.render(\n     <Provider store={store}>\n          <App />\n     </Provider>,\n     document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { useSelector } from 'react-redux'\nimport TopSpace from './components/TopSpace'\nimport Captions from './components/Captions'\nimport './App.css'\n\nexport default function App() {\n     const textSize = useSelector((state) => state.textSize)\n     const numLines = useSelector((state) => state.numLines)\n     const invertColors = useSelector((state) => state.invertColors)\n     var sizeString = textSize + 'vh'\n     var botHeight = textSize * numLines * 1.5\n     var topHeight = 100 - botHeight + 'vh'\n     botHeight += 'vh'\n     var bgColor = invertColors ? 'white' : 'black'\n     var color = invertColors ? 'black' : 'white'\n     return (\n          <div className=\"App\" style={{\n               backgroundColor: bgColor,\n               color: color\n          }}>\n               <TopSpace height={topHeight} />\n               <Captions height={botHeight} textSize={sizeString} />\n          </div>\n     )\n}\n"],"sourceRoot":""}